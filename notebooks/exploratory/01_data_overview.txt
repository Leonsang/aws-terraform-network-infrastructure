{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploración de Datos - Detección de Fraude\n",
    "\n",
    "Este notebook realiza un análisis exploratorio inicial del dataset de detección de fraude."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Importar librerías necesarias\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Configurar el estilo de las gráficas\n",
    "plt.style.use('seaborn')\n",
    "sns.set_palette('husl')\n",
    "\n",
    "# Configurar visualización de pandas\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Cargar el dataset\n",
    "df = pd.read_csv('../data/raw/creditcard.csv')\n",
    "\n",
    "# Mostrar información básica\n",
    "print(\"Dimensiones del dataset:\", df.shape)\n",
    "print(\"\\nInformación del dataset:\")\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Calcular valores nulos\n",
    "null_counts = df.isnull().sum()\n",
    "null_percentages = (null_counts / len(df)) * 100\n",
    "\n",
    "# Crear DataFrame con la información\n",
    "null_info = pd.DataFrame({\n",
    "    'Valores Nulos': null_counts,\n",
    "    'Porcentaje': null_percentages\n",
    "})\n",
    "\n",
    "# Mostrar resultados\n",
    "print(\"Análisis de valores nulos:\")\n",
    "display(null_info[null_info['Valores Nulos'] > 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Calcular distribución de clases\n",
    "class_dist = df['Class'].value_counts()\n",
    "class_percentages = (class_dist / len(df)) * 100\n",
    "\n",
    "# Crear gráfica\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.countplot(data=df, x='Class')\n",
    "plt.title('Distribución de Clases')\n",
    "plt.xlabel('Clase (0: Normal, 1: Fraude)')\n",
    "plt.ylabel('Cantidad')\n",
    "plt.show()\n",
    "\n",
    "# Mostrar porcentajes\n",
    "print(\"\\nDistribución de clases:\")\n",
    "for i in range(2):\n",
    "    print(f\"Clase {i}: {class_dist[i]} ({class_percentages[i]:.2f}%)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Calcular estadísticas descriptivas\n",
    "print(\"Estadísticas descriptivas:\")\n",
    "display(df.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Calcular matriz de correlación\n",
    "correlation_matrix = df.corr()\n",
    "\n",
    "# Crear mapa de calor\n",
    "plt.figure(figsize=(15, 10))\n",
    "sns.heatmap(correlation_matrix, cmap='coolwarm', center=0)\n",
    "plt.title('Matriz de Correlación')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Analizar características numéricas\n",
    "numeric_features = df.select_dtypes(include=[np.number]).columns\n",
    "print(\"Características numéricas:\", len(numeric_features))\n",
    "\n",
    "# Mostrar primeros registros\n",
    "print(\"\\nPrimeros registros del dataset:\")\n",
    "display(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Crear resumen de hallazgos\n",
    "print(\"Resumen de hallazgos:\")\n",
    "print(f\"1. Total de registros: {len(df)}\")\n",
    "print(f\"2. Total de características: {len(df.columns)}\")\n",
    "print(f\"3. Porcentaje de fraude: {(df['Class'] == 1).mean() * 100:.2f}%\")\n",
    "print(f\"4. Características con valores nulos: {df.isnull().any().sum()}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}