{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Análisis Temporal - Detección de Fraude\n",
    "\n",
    "Este notebook analiza los patrones temporales en el dataset de detección de fraude."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Importar librerías necesarias\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from datetime import datetime\n",
    "\n",
    "# Configurar el estilo de las gráficas\n",
    "plt.style.use('seaborn')\n",
    "sns.set_palette('husl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Cargar el dataset\n",
    "df = pd.read_csv('../data/raw/creditcard.csv')\n",
    "\n",
    "# Convertir Time a datetime (asumiendo que Time está en segundos desde la primera transacción)\n",
    "df['datetime'] = pd.to_datetime(df['Time'], unit='s')\n",
    "df['hour'] = df['datetime'].dt.hour\n",
    "df['day'] = df['datetime'].dt.day\n",
    "df['month'] = df['datetime'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Crear gráfica de fraude por hora\n",
    "plt.figure(figsize=(12, 6))\n",
    "fraud_by_hour = df[df['Class'] == 1].groupby('hour').size()\n",
    "normal_by_hour = df[df['Class'] == 0].groupby('hour').size()\n",
    "\n",
    "plt.plot(fraud_by_hour.index, fraud_by_hour.values, label='Fraude', color='red')\n",
    "plt.plot(normal_by_hour.index, normal_by_hour.values, label='Normal', color='blue', alpha=0.5)\n",
    "plt.title('Distribución de Transacciones por Hora del Día')\n",
    "plt.xlabel('Hora del Día')\n",
    "plt.ylabel('Número de Transacciones')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Calcular tasas de fraude por hora\n",
    "fraud_rate_by_hour = (df[df['Class'] == 1].groupby('hour').size() / \n",
    "                     df.groupby('hour').size() * 100)\n",
    "\n",
    "print(\"\\nTasas de fraude por hora:\")\n",
    "print(fraud_rate_by_hour)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Crear gráfica de fraude por día\n",
    "plt.figure(figsize=(12, 6))\n",
    "fraud_by_day = df[df['Class'] == 1].groupby('day').size()\n",
    "normal_by_day = df[df['Class'] == 0].groupby('day').size()\n",
    "\n",
    "plt.plot(fraud_by_day.index, fraud_by_day.values, label='Fraude', color='red')\n",
    "plt.plot(normal_by_day.index, normal_by_day.values, label='Normal', color='blue', alpha=0.5)\n",
    "plt.title('Distribución de Transacciones por Día')\n",
    "plt.xlabel('Día')\n",
    "plt.ylabel('Número de Transacciones')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Calcular tasas de fraude por día\n",
    "fraud_rate_by_day = (df[df['Class'] == 1].groupby('day').size() / \n",
    "                    df.groupby('day').size() * 100)\n",
    "\n",
    "print(\"\\nTasas de fraude por día:\")\n",
    "print(fraud_rate_by_day)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Crear gráfica de fraude por mes\n",
    "plt.figure(figsize=(12, 6))\n",
    "fraud_by_month = df[df['Class'] == 1].groupby('month').size()\n",
    "normal_by_month = df[df['Class'] == 0].groupby('month').size()\n",
    "\n",
    "plt.plot(fraud_by_month.index, fraud_by_month.values, label='Fraude', color='red')\n",
    "plt.plot(normal_by_month.index, normal_by_month.values, label='Normal', color='blue', alpha=0.5)\n",
    "plt.title('Distribución de Transacciones por Mes')\n",
    "plt.xlabel('Mes')\n",
    "plt.ylabel('Número de Transacciones')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Calcular tasas de fraude por mes\n",
    "fraud_rate_by_month = (df[df['Class'] == 1].groupby('month').size() / \n",
    "                      df.groupby('month').size() * 100)\n",
    "\n",
    "print(\"\\nTasas de fraude por mes:\")\n",
    "print(fraud_rate_by_month)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Calcular tiempo entre transacciones\n",
    "df['time_diff'] = df['Time'].diff()\n",
    "\n",
    "# Crear gráfica de tiempo entre transacciones\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.boxplot(data=df, x='Class', y='time_diff')\n",
    "plt.title('Tiempo entre Transacciones por Clase')\n",
    "plt.xlabel('Clase (0: Normal, 1: Fraude)')\n",
    "plt.ylabel('Tiempo entre Transacciones (segundos)')\n",
    "plt.show()\n",
    "\n",
    "# Calcular estadísticas de tiempo entre transacciones\n",
    "print(\"\\nEstadísticas de tiempo entre transacciones:\")\n",
    "print(df.groupby('Class')['time_diff'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Crear resumen de hallazgos temporales\n",
    "print(\"Resumen de hallazgos temporales:\")\n",
    "print(f\"1. Hora con mayor tasa de fraude: {fraud_rate_by_hour.idxmax():.0f}:00 ({fraud_rate_by_hour.max():.2f}%)\")\n",
    "print(f\"2. Día con mayor tasa de fraude: {fraud_rate_by_day.idxmax()} ({fraud_rate_by_day.max():.2f}%)\")\n",
    "print(f\"3. Mes con mayor tasa de fraude: {fraud_rate_by_month.idxmax()} ({fraud_rate_by_month.max():.2f}%)\")\n",
    "print(f\"4. Tiempo promedio entre transacciones fraudulentas: {df[df['Class'] == 1]['time_diff'].mean():.2f} segundos\")\n",
    "print(f\"5. Tiempo promedio entre transacciones normales: {df[df['Class'] == 0]['time_diff'].mean():.2f} segundos\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}