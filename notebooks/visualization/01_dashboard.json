{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Dashboard Interactivo - Detección de Fraude\n",
        "\n",
        "Este notebook implementa un dashboard interactivo para visualizar los resultados del análisis de fraude, utilizando Dash y servicios de AWS."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. Configuración del Entorno"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import boto3\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "from dash import Dash, dcc, html\n",
        "from dash.dependencies import Input, Output\n",
        "import json\n",
        "import logging\n",
        "from datetime import datetime\n",
        "\n",
        "# Configurar logging\n",
        "logging.basicConfig(level=logging.INFO)\n",
        "logger = logging.getLogger(__name__)\n",
        "\n",
        "# Inicializar cliente S3\n",
        "s3 = boto3.client('s3')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2. Carga de Datos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Configurar parámetros\n",
        "BUCKET = 'tu-bucket-s3'\n",
        "PREFIX = 'fraud-detection'\n",
        "\n",
        "def load_data():\n",
        "    try:\n",
        "        # Cargar datos procesados\n",
        "        response = s3.get_object(Bucket=BUCKET, Key=f'{PREFIX}/processed/processed_features.parquet')\n",
        "        df = pd.read_parquet(response['Body'])\n",
        "        \n",
        "        # Cargar resultados del modelo\n",
        "        response = s3.get_object(Bucket=BUCKET, Key=f'{PREFIX}/evaluation/latest_predictions.csv')\n",
        "        predictions = pd.read_csv(response['Body'])\n",
        "        \n        # Combinar datos\n",
        "        df['predicted_probability'] = predictions['probability']\n",
        "        df['predicted_class'] = predictions['prediction']\n",
        "        \n",
        "        logger.info(f\"Datos cargados exitosamente: {len(df)} registros\")\n",
        "        return df\n",
        "        \n",
        "    except Exception as e:\n",
        "        logger.error(f\"Error al cargar datos: {str(e)}\")\n",
        "        raise\n",
        "\n",
        "df = load_data()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. Funciones de Visualización"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def create_temporal_plot(df):\n",
        "    try:\n",
        "        # Crear gráfico temporal\n",
        "        fig = px.line(\n",
        "            df.groupby('hour').agg({\n",
        "                'Class': 'mean',\n",
        "                'predicted_probability': 'mean'\n",
        "            }).reset_index(),\n",
        "            x='hour',\n",
        "            y=['Class', 'predicted_probability'],\n",
        "            title='Tasa de Fraude Real vs Predicha por Hora',\n",
        "            labels={\n",
        "                'hour': 'Hora del Día',\n",
        "                'value': 'Tasa de Fraude',\n",
        "                'variable': 'Tipo'\n",
        "            }\n",
        "        )\n",
        "        return fig\n",
        "        \n",
        "    except Exception as e:\n",
        "        logger.error(f\"Error al crear gráfico temporal: {str(e)}\")\n",
        "        raise\n",
        "\n",
        "def create_amount_distribution(df):\n",
        "    try:\n",
        "        # Crear gráfico de distribución de montos\n",
        "        fig = px.histogram(\n",
        "            df,\n",
        "            x='Amount',\n",
        "            color='Class',\n",
        "            marginal='box',\n",
        "            nbins=50,\n",
        "            title='Distribución de Montos por Clase',\n",
        "            labels={\n",
        "                'Amount': 'Monto de Transacción',\n",
        "                'Class': 'Clase'\n",
        "            }\n",
        "        )\n",
        "        return fig\n",
        "        \n",
        "    except Exception as e:\n",
        "        logger.error(f\"Error al crear gráfico de distribución: {str(e)}\")\n",
        "        raise\n",
        "\n",
        "def create_feature_importance(df):\n",
        "    try:\n",
        "        # Cargar importancia de características\n",
        "        response = s3.get_object(Bucket=BUCKET, Key=f'{PREFIX}/models/feature_importance.json')\n",
        "        importance = json.loads(response['Body'].read())\n",
        "        \n",
        "        # Crear gráfico de importancia\n",
        "        fig = px.bar(\n",
        "            pd.DataFrame(importance.items(), columns=['Feature', 'Importance']),\n",
        "            x='Feature',\n",
        "            y='Importance',\n",
        "            title='Importancia de Características',\n",
        "            labels={\n",
        "                'Feature': 'Característica',\n",
        "                'Importance': 'Importancia'\n",
        "            }\n",
        "        )\n",
        "        return fig\n",
        "        \n",
        "    except Exception as e:\n",
        "        logger.error(f\"Error al crear gráfico de importancia: {str(e)}\")\n",
        "        raise"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. Configuración del Dashboard"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "app = Dash(__name__)\n",
        "\n",
        "app.layout = html.Div([\n",
        "    html.H1('Dashboard de Detección de Fraude'),\n",
        "    \n",
        "    # Filtros\n",
        "    html.Div([\n",
        "        html.H3('Filtros'),\n",
        "        dcc.RangeSlider(\n",
        "            id='amount-range',\n",
        "            min=df['Amount'].min(),\n",
        "            max=df['Amount'].max(),\n",
        "            value=[df['Amount'].min(), df['Amount'].max()],\n",
        "            marks={str(val): str(val) for val in np.linspace(df['Amount'].min(), df['Amount'].max(), 5)},\n",
        "            step=None\n",
        "        ),\n",
        "        html.Label('Rango de Montos'),\n",
        "        \n",
        "        dcc.Dropdown(\n",
        "            id='time-filter',\n",
        "            options=[{'label': f'Hora {i}', 'value': i} for i in range(24)],\n",
        "            value=[],\n",
        "            multi=True,\n",
        "            placeholder='Seleccionar Horas'\n",
        "        )\n",
        "    ], style={'padding': '20px'}),\n",
        "    \n",
        "    # Métricas principales\n",
        "    html.Div([\n",
        "        html.Div([\n",
        "            html.H4('Total de Transacciones'),\n",
        "            html.H2(id='total-transactions')\n",
        "        ], className='metric-box'),\n",
        "        \n",
        "        html.Div([\n",
        "            html.H4('Tasa de Fraude'),\n",
        "            html.H2(id='fraud-rate')\n",
        "        ], className='metric-box'),\n",
        "        \n",
        "        html.Div([\n",
        "            html.H4('Monto Total en Riesgo'),\n",
        "            html.H2(id='risk-amount')\n",
        "        ], className='metric-box')\n",
        "    ], style={'display': 'flex', 'justifyContent': 'space-around', 'padding': '20px'}),\n",
        "    \n",
        "    # Gráficos\n",
        "    html.Div([\n",
        "        dcc.Graph(id='temporal-plot'),\n",
        "        dcc.Graph(id='amount-distribution'),\n",
        "        dcc.Graph(id='feature-importance')\n",
        "    ])\n",
        "])\n",
        "\n",
        "# Callbacks\n",
        "@app.callback(\n",
        "    [Output('total-transactions', 'children'),\n",
        "     Output('fraud-rate', 'children'),\n",
        "     Output('risk-amount', 'children'),\n",
        "     Output('temporal-plot', 'figure'),\n",
        "     Output('amount-distribution', 'figure'),\n",
        "     Output('feature-importance', 'figure')],\n",
        "    [Input('amount-range', 'value'),\n",
        "     Input('time-filter', 'value')]\n",
        ")\n",
        "def update_dashboard(amount_range, selected_hours):\n",
        "    try:\n",
        "        # Filtrar datos\n",
        "        filtered_df = df[\n",
        "            (df['Amount'] >= amount_range[0]) &\n",
        "            (df['Amount'] <= amount_range[1])\n",
        "        ]\n",
        "        \n",
        "        if selected_hours:\n",
        "            filtered_df = filtered_df[filtered_df['hour'].isin(selected_hours)]\n",
        "            \n",
        "        # Calcular métricas\n",
        "        total = len(filtered_df)\n",
        "        fraud_rate = (filtered_df['Class'].mean() * 100).round(2)\n",
        "        risk_amount = filtered_df[filtered_df['predicted_class'] == 1]['Amount'].sum()\n",
        "        \n        # Crear gráficos\n",
        "        temporal_fig = create_temporal_plot(filtered_df)\n",
        "        amount_fig = create_amount_distribution(filtered_df)\n",
        "        importance_fig = create_feature_importance(filtered_df)\n",
        "        \n",
        "        return [\n",
        "            f\"{total:,}\",\n",
        "            f\"{fraud_rate}%\",\n",
        "            f\"${risk_amount:,.2f}\",\n",
        "            temporal_fig,\n",
        "            amount_fig,\n",
        "            importance_fig\n",
        "        ]\n",
        "        \n",
        "    except Exception as e:\n",
        "        logger.error(f\"Error al actualizar dashboard: {str(e)}\")\n",
        "        raise"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. Estilos CSS"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "app.css.append_css({\n",
        "    'external_url': [\n",
        "        'https://codepen.io/chriddyp/pen/bWLwgP.css',\n",
        "        {\n",
        "            'href': 'https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css'\n",
        "        }\n",
        "    ]\n",
        "})\n",
        "\n",
        "# Estilos adicionales\n",
        "app.index_string = '''\n",
        "<!DOCTYPE html>\n",
        "<html>\n",
        "    <head>\n",
        "        {%metas%}\n",
        "        <title>Dashboard de Detección de Fraude</title>\n",
        "        {%favicon%}\n",
        "        {%css%}\n",
        "        <style>\n",
        "            .metric-box {\n",
        "                padding: 20px;\n",
        "                border-radius: 5px;\n",
        "                background-color: #f8f9fa;\n",
        "                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n",
        "                text-align: center;\n",
        "                margin: 10px;\n",
        "                flex: 1;\n",
        "            }\n",
        "            .metric-box h4 {\n",
        "                color: #6c757d;\n",
        "                margin-bottom: 10px;\n",
        "            }\n",
        "            .metric-box h2 {\n",
        "                color: #007bff;\n",
        "                margin: 0;\n",
        "            }\n",
        "        </style>\n",
        "    </head>\n",
        "    <body>\n",
        "        {%app_entry%}\n",
        "        <footer>\n",
        "            {%config%}\n",
        "            {%scripts%}\n",
        "            {%renderer%}\n",
        "        </footer>\n",
        "    </body>\n",
        "</html>\n",
        "'''"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 6. Ejecución del Dashboard"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "if __name__ == '__main__':\n",
        "    try:\n",
        "        # Guardar una versión estática del dashboard\n",
        "        app.run_server(debug=True, port=8050)\n",
        "        \n        # Generar reporte de uso\n",
        "        usage_report = {\n",
        "            'timestamp': datetime.now().isoformat(),\n",
        "            'total_records': len(df),\n",
        "            'filters_available': {\n",
        "                'amount_range': [float(df['Amount'].min()), float(df['Amount'].max())],\n",
        "                'time_range': list(range(24))\n",
        "            },\n",
        "            'metrics_generated': [\n",
        "                'total_transactions',\n",
        "                'fraud_rate',\n",
        "                'risk_amount'\n",
        "            ],\n",
        "            'plots_generated': [\n",
        "                'temporal_plot',\n",
        "                'amount_distribution',\n",
        "                'feature_importance'\n",
        "            ]\n",
        "        }\n",
        "        \n",
        "        # Guardar reporte en S3\n",
        "        s3.put_object(\n",
        "            Bucket=BUCKET,\n",
        "            Key=f'{PREFIX}/dashboard/usage_report.json',\n",
        "            Body=json.dumps(usage_report, indent=2)\n",
        "        )\n",
        "        \n",
        "        logger.info(\"Dashboard iniciado exitosamente\")\n",
        "        \n",
        "    except Exception as e:\n",
        "        logger.error(f\"Error al iniciar dashboard: {str(e)}\")\n",
        "        raise"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
} 